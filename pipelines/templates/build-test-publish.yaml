# A multi-stage template which builds, tests and pushed all presidio assets.
# There are five stages:
# * Setup - validates, using git diff, if deps containers should be rebuilt. 
# * Python - Builds tests and pushes python service. if deps build is required the base container is rebuilt 
#            and later stages will use the specific deps version number for building the presidio services.
# * Golang - Builds tests and pushes, in parallel, golang service. if deps build is required the base container is rebuilt 
#            and later stages will use the specific deps version number for building the presidio services.
# * Test-Functional - Runs local functional tests using the containers built in the previous stage.
# * Publish Artifacts - Pulls, tags and pushes the containers which were built and tested in the previous stages,
#                       according to the current branch (master builds "latest" label, branches build with branch-name
#                       label)
#
# * parameters:
#     registry_service_principal: service connection to docker registry
#     registry_name: full name of container registry (i.e. presidio.azurecr.io)
#     artifact_feed: pypi artifact used to push the wheel
parameters:
  registry_service_principal: 
  registry_name: 
  artifact_feed:

stages:
  # Env
  - stage: Setup
    displayName: Set Pipeline globals
    pool:
      vmImage: 'ubuntu-latest'
    jobs:
    - job: SetBuildDep
      displayName: Set base container build
      steps: 
        - bash: |
            MASTER="remotes/origin/master"
            GIT_DIFF_SOURCEBRANCH="HEAD"
            # Set build_deps Triggers to false
            BUILD_DEPS=false
            DEPS_LABEL=latest

            # we should always use master as a comparison, except in the case that this is
            # a build for master. In this case we can use HEAD~ (1 commit behind master)
            # because all merges will be squash merges
            if [[ $(git diff "$MASTER") ]]; then
                GIT_DIFF_UPSTREAMBRANCH="$MASTER"
            else
                GIT_DIFF_UPSTREAMBRANCH="$MASTER~"
            fi
            echo "GIT_DIFF_UPSTREAMBRANCH: $GIT_DIFF_UPSTREAMBRANCH"
            echo "GIT_DIFF_SOURCEBRANCH: $GIT_DIFF_SOURCEBRANCH"
            FILE_CHANGE_SET=$(git diff "$GIT_DIFF_SOURCEBRANCH" "$GIT_DIFF_UPSTREAMBRANCH" --name-only)
            echo "Files changed since last commit..."
            echo "$FILE_CHANGE_SET"

            # if git diff detects commits made to the deps files we build the dep containerss
            if [[ ! -z "$(echo $FILE_CHANGE_SET | grep -e "Gopkg.lock" -e "Gopkg.toml" -e "Dockerfile.python.deps" -e "Dockerfile.golang.deps" -e "Dockerfile.python.deps" -e "presidio-analyzer/Pipfile" -e "presidio-analyzer/Pipfile.lock")" ]]; then
                echo "Performing build deps."
                BUILD_DEPS=true
                DEPS_LABEL='$(Build.BuildId)'
            fi

            echo "##vso[task.setvariable variable=BUILD_DEPS]$BUILD_DEPS"
            echo "##vso[task.setvariable variable=DEPS_LABEL]$DEPS_LABEL"
          displayName: Git diff verify deps build
        # To pass the variable build_deps, we write it to a file
        - bash: |
            mkdir -p $(Pipeline.Workspace)/variables
            echo "$DEPS_LABEL" > $(Pipeline.Workspace)/variables/DEPS_LABEL
            echo "$BUILD_DEPS" > $(Pipeline.Workspace)/variables/BUILD_DEPS
            echo "##vso[task.setvariable variable=BUILD_DEPS;isOutput=true]$BUILD_DEPS"
            echo "##vso[task.setvariable variable=DEPS_LABEL;isOutput=true]$DEPS_LABEL"
          displayName: Copy Artifacts
          name: setEnv
        # Publish the folder as pipeline artifact
        - publish: $(Pipeline.Workspace)/variables
          artifact: variables
          displayName: Publish Artifacts

  # Python Stage
  - stage: PythonStage
    displayName: Build Presidio Dependency Containers
    dependsOn: Setup
    pool:
      vmImage: 'ubuntu-latest'
    jobs:
      - job: GetDepsJob
        displayName: Get Deps State
        steps:
        # Download the artifacts
        - download: current
          displayName: Download deps artifacts
          artifact: variables
        # Read the variable from the file, then expose it in the job
        - bash: |
            DEPS_LABEL=$(cat $(Pipeline.Workspace)/variables/DEPS_LABEL)
            BUILD_DEPS=$(cat $(Pipeline.Workspace)/variables/BUILD_DEPS)
            echo "##vso[task.setvariable variable=DEPS_LABEL;isOutput=true]$DEPS_LABEL"
            echo "##vso[task.setvariable variable=BUILD_DEPS;isOutput=true]$BUILD_DEPS"
          displayName: Set deps env
          name: setEnv
      - job: PythonDepsBuild
        displayName: Build Python Deps Container
        timeoutInMinutes: 30 
        dependsOn: GetDepsJob
        variables:
          DEPS_LABEL: $[ dependencies.GetDepsJob.outputs['setEnv.DEPS_LABEL'] ]
          BUILD_DEPS: $[ dependencies.GetDepsJob.outputs['setEnv.BUILD_DEPS'] ]
        steps:
          - task: Docker@2
            displayName: 'Build and Push Python dependencies'
            condition: eq(variables['BUILD_DEPS'], 'true')
            inputs:
              containerRegistry: $(REGISTRY) # input registry name	
              repository: 'presidio-python-deps'
              Dockerfile: Dockerfile.python.deps 
              tags: | 
                $(Build.BuildId)	
      - job: BuildPython
        displayName: Build Analyzer Service
        timeoutInMinutes: 60  
        dependsOn: 
        - PythonDepsBuild
        - GetDepsJob
        variables:
          DEPS_LABEL: $[ dependencies.GetDepsJob.outputs['setEnv.DEPS_LABEL'] ]
          ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
            PYTHON_BUILD_TAG: '$(Build.BuildId).rc'
          ${{ if ne(variables['Build.SourceBranchName'], 'master') }}:
            PYTHON_BUILD_TAG: '$(Build.BuildId)'
        steps: 
        - template: ./build-python-template.yaml  
          parameters:
            folder_name: presidio-analyzer
            package_name: presidio_analyzer
            lint: true
            artifact_feed: ${{parameters.artifact_feed}}
            registry_service_connection: ${{parameters.registry_service_principal}}
            registry_name: ${{parameters.registry_name}} 
            registry_service_principal: ${{parameters.registry_service_principal}}
            presidio_label: $(Build.BuildID)
            deps_label: $(DEPS_LABEL)
  
  # Golang Stage
  - stage: GolangStage
    displayName: Build Presidio Dependency Containers
    dependsOn: Setup
    pool:
      vmImage: 'ubuntu-latest'
    jobs:
      - job: GetDepsJob
        displayName: Get Deps State
        steps:
        # Download the artifacts
        - download: current
          displayName: Download deps artifacts
          artifact: variables
        # Read the variable from the file, then expose it in the job
        - bash: |
            DEPS_LABEL=$(cat $(Pipeline.Workspace)/variables/DEPS_LABEL)
            BUILD_DEPS=$(cat $(Pipeline.Workspace)/variables/BUILD_DEPS)
            echo "##vso[task.setvariable variable=DEPS_LABEL;isOutput=true]$DEPS_LABEL"
            echo "##vso[task.setvariable variable=BUILD_DEPS;isOutput=true]$BUILD_DEPS"
          displayName: Set deps env
          name: setEnv
      - job: GolangDepsBuild
        displayName: Build Golang Deps Container
        timeoutInMinutes: 30 
        dependsOn: GetDepsJob
        variables:
          DEPS_LABEL: $[ dependencies.GetDepsJob.outputs['setEnv.DEPS_LABEL'] ]
          BUILD_DEPS: $[ dependencies.GetDepsJob.outputs['setEnv.BUILD_DEPS'] ]
        steps:
          - task: Docker@2
            displayName: 'Build and Push Golang dependencies'
            condition: eq(variables['BUILD_DEPS'], 'true')
            inputs:
              containerRegistry: $(REGISTRY) # input registry name	
              repository: presidio-golang-deps 
              Dockerfile: Dockerfile.golang.deps 
              tags: | 
                  $(Build.BuildId)
      - job: GolangBase
        displayName: Build Golang Base Container
        timeoutInMinutes: 30 
        dependsOn: 
        - GolangDepsBuild
        - GetDepsJob
        variables:
          DEPS_LABEL: $[ dependencies.GetDepsJob.outputs['setEnv.DEPS_LABEL'] ]
          ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
              BUILD_LABEL: 'latest'
          ${{ if ne(variables['Build.SourceBranchName'], 'master') }}:
              BUILD_LABEL: '$(Build.SourceBranchName)'
        steps:
          - template: ./build-golang-template.yaml
            parameters:
              registry_service_connection: ${{parameters.registry_service_principal}}
              registry_name: ${{parameters.registry_name}} 
              make_command_to_run: docker-build-golang-base
              image_name: presidio-golang-base
              presidio_label: $(Build.BuildID)
              presidio_branch_label: $(BUILD_LABEL)
              deps_label: $(DEPS_LABEL)

      - job:  GolangService
        displayName: Build Golang Service Containers
        timeoutInMinutes: 15 
        dependsOn: 
        - GetDepsJob
        - Golangbase
        variables:
          DEPS_LABEL: $[ dependencies.GetDepsJob.outputs['setEnv.DEPS_LABEL'] ]
          ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
              BUILD_LABEL: 'latest'
          ${{ if ne(variables['Build.SourceBranchName'], 'master') }}:
              BUILD_LABEL: '$(Build.SourceBranchName)'
        strategy:
          maxParallel: 10
          matrix:
            ANNONIMYZER:
                SERVICE_NAME: presidio-anonymizer
            OCR:
                SERVICE_NAME: presidio-ocr
            ANNONIMYZER_IMAGE:
                SERVICE_NAME: presidio-anonymizer-image
            API:
                SERVICE_NAME: presidio-api
            SCHDULER:
                SERVICE_NAME: presidio-scheduler
            DATA_SINK:
                SERVICE_NAME: presidio-datasink
            COLLECTOR:
                SERVICE_NAME: presidio-collector
            RECOGNIZER_STORE:
                SERVICE_NAME: presidio-recognizers-store
            TESTER:
                SERVICE_NAME: presidio-tester
            FUNCTIONAL_TESTS:
                SERVICE_NAME: functional-tests
        steps:  
        - template: ./Build-golang-template.yaml
          parameters:
            registry_service_connection: ${{parameters.registry_service_principal}}
            registry_name: ${{parameters.registry_name}}
            image_name: $(SERVICE_NAME)
            make_command_to_run: docker-build-golang-single
            presidio_label: $(Build.BuildID)
            presidio_branch_label: $(BUILD_LABEL)
            deps_label: $(DEPS_LABEL)

  # Integration tests
  - stage: TestFunctional
    displayName: Run Functional Tests
    dependsOn: 
    - PythonStage
    - GolangStage
    pool:
      vmImage: 'ubuntu-latest'
    jobs: 
      - job: FunctionalTests
        displayName: Presidio Functional Tests
        steps:  
        # - bash: |
        #     mkdir -p '$(GOBIN)'
        #     mkdir -p '$(GOPATH)/pkg'
        #     rm -rf '$(MODULEPATH)'
        #     mkdir -p '$(MODULEPATH)'
        #     shopt -s extglob
        #     mv !(gopath) '$(MODULEPATH)' --force
        #     echo '##vso[task.prependpath]$(GOBIN)'
        #     echo '##vso[task.prependpath]$(GOROOT)/bin'
        #   displayName: 'Setup Go Env'
        # - bash: | 
        #     curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
        #     dep ensure
        #   displayName: 'dep ensure'
        #   workingDirectory: '$(MODULEPATH)'
        - task: Docker@2
          displayName: Docker login
          inputs:
            containerRegistry: ${{parameters.registry_service_principal}}
            command: 'login'
        - bash: | 
            make DOCKER_REGISTRY=$REGISTRY_NAME PRESIDIO_LABEL=$(Build.BuildID) test-functional-no-build
          displayName: 'Run functional tests'
          workingDirectory: '$(MODULEPATH)'

  # # Push artifacts
  - stage: PublishArtifacts 
    displayName: Publish Build Artifacts
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    dependsOn: 
    - TestFunctional
    pool:
      vmImage: 'ubuntu-latest'
    variables:
        ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
            BUILD_LABEL: 'latest'
        ${{ if ne(variables['Build.SourceBranchName'], 'master') }}:
            BUILD_LABEL: '$(Build.SourceBranchName)'
    jobs: 
      - job: GetDepsJob
        displayName: Get Deps State
        steps:
        # Download the artifacts
        - download: current
          displayName: Download deps artifacts
          artifact: variables
        # Read the variable from the file, then expose it in the job
        - bash: |
            DEPS_LABEL=$(cat $(Pipeline.Workspace)/variables/DEPS_LABEL)
            BUILD_DEPS=$(cat $(Pipeline.Workspace)/variables/BUILD_DEPS)
            echo "##vso[task.setvariable variable=DEPS_LABEL;isOutput=true]$DEPS_LABEL"
            echo "##vso[task.setvariable variable=BUILD_DEPS;isOutput=true]$BUILD_DEPS"
          displayName: Set deps env
          name: setEnv
      - job: PublishArtifacts
        displayName: Push Containers
        dependsOn: GetDepsJob
        variables:
          DEPS_LABEL: $[ dependencies.GetDepsJob.outputs['setEnv.DEPS_LABEL'] ]
          BUILD_DEPS: $[ dependencies.GetDepsJob.outputs['setEnv.BUILD_DEPS'] ]
        steps:  
        - task: Docker@2
          inputs:
            containerRegistry: ${{ parameters.registry_service_principal }}
            command: 'login'
        - task: PublishBuildArtifacts@1
          displayName: 'Publish Helm Artifact'
          inputs:
            PathtoPublish: charts
            ArtifactName: dropchart  
        - bash: |
            docker pull $REGISTRY_NAME/presidio-golang-base:$(Build.BuildID)
            docker tag \
              $REGISTRY_NAME/presidio-golang-base:$(Build.BuildID) \
              $REGISTRY_NAME/presidio-golang-base:$(BUILD_LABEL)
            docker push $REGISTRY_NAME/presidio-golang-base:$(BUILD_LABEL)
          env:
            REGISTRY_NAME: ${{ parameters.registry_name_parameter }}
          displayName: 'Tag golang base image'

        - bash: |
            make DOCKER_REGISTRY=$REGISTRY_NAME PRESIDIO_LABEL=$(Build.BuildID) PRESIDIO_DEPS_LABEL=$(DEPS_LABEL) docker-push-latest-deps
            make DOCKER_REGISTRY=$REGISTRY_NAME PRESIDIO_LABEL=$(Build.BuildId) RELEASE_VERSION=$(RELEASE_NAME)s docker-push-release                    
          env:
            REGISTRY_NAME: ${{ parameters.registry_name_parameter }}
          displayName: 'Push Docker Images - Master Branch'    # push with latest label - master branch 
          condition: eq(variables['Build.SourceBranchName'], 'master')

        - bash: | 
            make DOCKER_REGISTRY=$REGISTRY_NAME PRESIDIO_LABEL=$(Build.BuildID) PRESIDIO_DEPS_LABEL=$(DEPS_LABEL) PRESIDIO_BRANCH_LABEL=$(BUILD_LABEL) docker-push-latest-branch-deps
            make DOCKER_REGISTRY=$REGISTRY_NAME PRESIDIO_LABEL=$(Build.BuildID) PRESIDIO_DEPS_LABEL=$(DEPS_LABEL) PRESIDIO_BRANCH_LABEL=$(BUILD_LABEL) docker-push-latest-branch
          env:
            REGISTRY_NAME: ${{ parameters.registry_name_parameter }}
          displayName: 'Push Docker Images - Feature Branch'    # push with branch-name label - feature branch
          condition: ne(variables['Build.SourceBranchName'], 'master')